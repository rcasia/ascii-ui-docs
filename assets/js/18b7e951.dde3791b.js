"use strict";(self.webpackChunkascii_ui=self.webpackChunkascii_ui||[]).push([[233],{8346:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Get Started","href":"/ascii-ui-docs/docs/intro","docId":"intro","unlisted":false},{"type":"link","label":"Create a Custom Component","href":"/ascii-ui-docs/docs/custom_components","docId":"custom_components","unlisted":false},{"type":"category","label":"Hooks","collapsible":true,"collapsed":false,"customProps":{"description":"Hooks overview"},"items":[{"type":"link","label":"useState","href":"/ascii-ui-docs/docs/hooks/use_state","docId":"hooks/use_state","unlisted":false},{"type":"link","label":"useEffect","href":"/ascii-ui-docs/docs/hooks/use_effect","docId":"hooks/use_effect","unlisted":false},{"type":"link","label":"useReducer","href":"/ascii-ui-docs/docs/hooks/use_reducer","docId":"hooks/use_reducer","unlisted":false},{"type":"link","label":"useFunctionRegistry","href":"/ascii-ui-docs/docs/hooks/use_function_registry","docId":"hooks/use_function_registry","unlisted":false}],"href":"/ascii-ui-docs/docs/hooks/"}]},"docs":{"custom_components":{"id":"custom_components","title":"Create a Custom Component","description":"TODO","sidebar":"tutorialSidebar"},"hooks/hooks":{"id":"hooks/hooks","title":"Hooks in ascii-ui.nvim","description":"ascii-ui.nvim introduces hooks as a core mechanism for managing state, side effects, and behavioral reusability within functional UI components\u2014drawing inspiration from React\'s hooks. Hooks enable powerful, modular, and declarative UI development, allowing your components to be interactive and dynamic while keeping logic clean and localized.","sidebar":"tutorialSidebar"},"hooks/use_effect":{"id":"hooks/use_effect","title":"useEffect Hook","description":"The useEffect hook in ascii-ui.nvim is a mechanism for running side effects in your functional components. Inspired by React\u2019s useEffect, it allows you to perform operations such as logging, subscriptions, or updating external resources in response to state changes or component rendering.","sidebar":"tutorialSidebar"},"hooks/use_function_registry":{"id":"hooks/use_function_registry","title":"useFunctionRegistry Hook","description":"The useFunctionRegistry hook in ascii-ui.nvim allows you to register a Lua function and receive a reference string that can be used as a callback in declarative UI markup or passed as a prop to components that expect a function reference. This is especially useful in scenarios where your UI definition is dynamic (such as when using XML-like syntax) or where functions need to be referenced indirectly.","sidebar":"tutorialSidebar"},"hooks/use_reducer":{"id":"hooks/use_reducer","title":"useReducer Hook","description":"The useReducer hook in ascii-ui.nvim is a powerful tool for managing complex state logic within functional components. Inspired by React\u2019s useReducer, it is especially useful when state transitions depend on specific actions or when the next state depends on the previous one.","sidebar":"tutorialSidebar"},"hooks/use_state":{"id":"hooks/use_state","title":"useState Hook","description":"The useState hook in ascii-ui.nvim is a fundamental building block for managing state within functional components. Inspired by React\'s useState, it allows you to store and update values that persist across component re-renders. This makes it easy to build interactive and dynamic user interfaces.","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Get Started","description":"This docs are still in progress, but you can already start using the library.","sidebar":"tutorialSidebar"}}}}')}}]);