"use strict";(self.webpackChunkascii_ui=self.webpackChunkascii_ui||[]).push([[538],{126:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"hooks/use_state","title":"useState Hook","description":"The useState hook in ascii-ui.nvim is a fundamental building block for managing state within functional components. Inspired by React\'s useState, it allows you to store and update values that persist across component re-renders. This makes it easy to build interactive and dynamic user interfaces.","source":"@site/docs/hooks/use_state.md","sourceDirName":"hooks","slug":"/hooks/use_state","permalink":"/ascii-ui-docs/docs/hooks/use_state","draft":false,"unlisted":false,"editUrl":"https://github.com/rcasia/ascii-ui-docs/docs/hooks/use_state.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"sidebar_label":"useState"},"sidebar":"tutorialSidebar","previous":{"title":"Hooks in ascii-ui.nvim","permalink":"/ascii-ui-docs/docs/hooks/"},"next":{"title":"useEffect","permalink":"/ascii-ui-docs/docs/hooks/use_effect"}}');var i=s(4848),a=s(8453);const l={sidebar_position:1,sidebar_label:"useState"},r="useState Hook",c={},d=[{value:"Overview",id:"overview",level:2},{value:"Signature",id:"signature",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Usage",id:"usage",level:2},{value:"Basic Example",id:"basic-example",level:3},{value:"Multiple State Variables",id:"multiple-state-variables",level:3},{value:"Updating State",id:"updating-state",level:3},{value:"Functional Updates",id:"functional-updates",level:3},{value:"Comparison with React&#39;s <code>useState</code>",id:"comparison-with-reacts-usestate",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Related",id:"related",level:2},{value:"References",id:"references",level:2}];function o(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsxs)(t.h1,{id:"usestate-hook",children:[(0,i.jsx)(t.code,{children:"useState"})," Hook"]})}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"useState"})," hook in ",(0,i.jsx)(t.strong,{children:"ascii-ui.nvim"})," is a fundamental building block for managing state within functional components. Inspired by ",(0,i.jsxs)(t.a,{href:"https://react.dev/reference/react/useState",children:["React's ",(0,i.jsx)(t.code,{children:"useState"})]}),", it allows you to store and update values that persist across component re-renders. This makes it easy to build interactive and dynamic user interfaces."]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"useState"})," is a hook designed for use within ",(0,i.jsx)(t.strong,{children:"ascii-ui.nvim"})," functional components. It lets you associate a piece of state (any Lua value) with a component instance. When the state changes, the component is notified and re-renders with the new value."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Key features:"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Simple state management for functional components."}),"\n",(0,i.jsx)(t.li,{children:"Triggers UI updates when the state changes."}),"\n",(0,i.jsx)(t.li,{children:"Encapsulates state logic within a component, without relying on global variables."}),"\n"]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"signature",children:"Signature"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-lua",children:"local getValue, setValue = useState(initialValue)\n"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"initialValue"})," (",(0,i.jsx)(t.em,{children:"any"}),"): The initial state value."]}),"\n"]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Name"}),(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsx)(t.tbody,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"initialValue"}),(0,i.jsx)(t.td,{children:"any"}),(0,i.jsx)(t.td,{children:"The initial value for state."})]})})]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"return-value",children:"Return Value"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"useState"})," returns two functions:"]}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Name"}),(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"getValue"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"function(): any"})}),(0,i.jsx)(t.td,{children:"Returns the current value of the state."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"setValue"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"function(any): ()"})}),(0,i.jsx)(t.td,{children:"Updates the state value and schedules the component to rerun."})]})]})]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(t.h3,{id:"basic-example",children:"Basic Example"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-lua",children:'local ui = require("ascii-ui")\nlocal useState = ui.hooks.useState\n\nlocal function MyComponent()\n  local count, setCount = useState(0)\n\n  return function()\n      -- Render logic using count()\n  end\nend\n'})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"count()"})," gets the current value."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"setCount(newValue)"})," updates the value and triggers a UI update."]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"multiple-state-variables",children:"Multiple State Variables"}),"\n",(0,i.jsxs)(t.p,{children:["You can use ",(0,i.jsx)(t.code,{children:"useState"})," multiple times in a component to manage separate state values:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-lua",children:'local count, setCount = useState(0)\nlocal name, setName = useState("initial value")\n'})}),"\n",(0,i.jsx)(t.h3,{id:"updating-state",children:"Updating State"}),"\n",(0,i.jsx)(t.p,{children:"Call the setter function with the new value:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-lua",children:'setCount(count() + 1)\nsetName("new value")\n'})}),"\n",(0,i.jsx)(t.h3,{id:"functional-updates",children:"Functional Updates"}),"\n",(0,i.jsxs)(t.p,{children:["Unlike React's ",(0,i.jsx)(t.code,{children:"useState"}),", the ascii-ui version does not have a built-in functional update form (like passing a function to setState). However, you can implement logic yourself if needed:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-lua",children:"setCount(function(prev) return prev + 1 end) -- Not supported directly\nsetCount(count() + 1) -- Correct usage\n"})}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsxs)(t.h2,{id:"comparison-with-reacts-usestate",children:["Comparison with React's ",(0,i.jsx)(t.code,{children:"useState"})]}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Feature"}),(0,i.jsx)(t.th,{children:"ascii-ui.nvim"}),(0,i.jsx)(t.th,{children:"React"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Initialization"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"useState(initialValue)"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"useState(initialValue)"})})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Get current value"}),(0,i.jsxs)(t.td,{children:["Call getter: ",(0,i.jsx)(t.code,{children:"count()"})]}),(0,i.jsxs)(t.td,{children:["Use variable: ",(0,i.jsx)(t.code,{children:"count"})]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Set value"}),(0,i.jsxs)(t.td,{children:["Call setter: ",(0,i.jsx)(t.code,{children:"setCount(val)"})]}),(0,i.jsxs)(t.td,{children:["Call setter: ",(0,i.jsx)(t.code,{children:"setCount(val)"})]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Triggers rerender"}),(0,i.jsx)(t.td,{children:"Yes"}),(0,i.jsx)(t.td,{children:"Yes"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Functional updates"}),(0,i.jsx)(t.td,{children:"Not built-in"}),(0,i.jsxs)(t.td,{children:["Built-in: ",(0,i.jsx)(t.code,{children:"setCount(prev => prev + 1)"})]})]})]})]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Always call ",(0,i.jsx)(t.code,{children:"useState"})," at the top level of your component (not inside loops or conditionals)."]}),"\n",(0,i.jsxs)(t.li,{children:["Use unique ",(0,i.jsx)(t.code,{children:"useState"})," calls for each independent piece of state."]}),"\n",(0,i.jsxs)(t.li,{children:["Use the getter function (e.g., ",(0,i.jsx)(t.code,{children:"count()"}),") to access the current value inside the render function."]}),"\n",(0,i.jsxs)(t.li,{children:["Remember to call the setter (e.g., ",(0,i.jsx)(t.code,{children:"setCount(newValue)"}),") to update the state and trigger rerendering."]}),"\n"]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"related",children:"Related"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"./use_reducer",children:(0,i.jsx)(t.code,{children:"useReducer"})}),": For managing complex state logic."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"./use_effect",children:(0,i.jsx)(t.code,{children:"useEffect"})}),": For running side effects after state updates."]}),"\n"]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"references",children:"References"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://github.com/rcasia/ascii-ui.nvim/blob/main/lua/ascii-ui/hooks/use_state.lua",children:"ascii-ui.nvim source: use_state.lua"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://react.dev/reference/react/useState",children:"React documentation: useState"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://github.com/rcasia/ascii-ui.nvim#readme",children:"ascii-ui.nvim README"})}),"\n"]}),"\n",(0,i.jsx)(t.hr,{})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>l,x:()=>r});var n=s(6540);const i={},a=n.createContext(i);function l(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);