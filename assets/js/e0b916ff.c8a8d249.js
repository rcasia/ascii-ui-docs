"use strict";(self.webpackChunkascii_ui=self.webpackChunkascii_ui||[]).push([[814],{3567:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>r,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>u});const o=JSON.parse('{"id":"custom_components","title":"Custom Components","description":"The core principle of building an application with ascii-ui.nvim is defining","source":"@site/docs/custom_components.md","sourceDirName":".","slug":"/custom_components","permalink":"/ascii-ui-docs/docs/custom_components","draft":false,"unlisted":false,"editUrl":"https://github.com/rcasia/ascii-ui-docs/edit/main/docs/custom_components.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Get Started","permalink":"/ascii-ui-docs/docs/get-started"},"next":{"title":"Hooks in ascii-ui.nvim","permalink":"/ascii-ui-docs/docs/hooks/"}}');var i=t(4848),s=t(8453);const a={sidebar_position:2},c="Custom Components",r={},u=[{value:"\ud83d\udee0\ufe0f Creating a Simple Counter Component",id:"\ufe0f-creating-a-simple-counter-component",level:2}];function l(n){const e={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"custom-components",children:"Custom Components"})}),"\n",(0,i.jsx)(e.p,{children:"The core principle of building an application with ascii-ui.nvim is defining\ncustom components. A custom component is essentially a Lua function that\nreturns a description of what should be rendered on the screen, allowing you\nto combine existing primitives (like Button and Paragraph) and manage local\nstate."}),"\n",(0,i.jsx)(e.h2,{id:"\ufe0f-creating-a-simple-counter-component",children:"\ud83d\udee0\ufe0f Creating a Simple Counter Component"}),"\n",(0,i.jsx)(e.p,{children:"This example shows the core pattern: defining a component, managing its state,\nand rendering interactive elements."}),"\n",(0,i.jsx)(e.p,{children:"The goal is to create a simple counter that displays a number and has a button\nto increment it."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:'-- 1. Import the necessary modules\nlocal ui = require("ascii-ui")\nlocal useState = ui.hooks.useState\nlocal Button = ui.components.Button\nlocal Paragraph = ui.components.Paragraph\n\n-- 2. Define the custom component using ui.createComponent\nlocal SimpleCounter = ui.createComponent("SimpleCounter", function()\n    -- 3. Use the useState hook to manage the counter\'s state\n    -- It returns the current value (`count`) and an update function (`setCount`)\n    local count, setCount = useState(0)\n\n    -- 4. Define the logic for handling button press\n    local function increment()\n        -- The update function takes the new value and triggers a re-render\n        setCount(count + 1)\n    end\n\n    -- 5. Return a table of components to be rendered\n    return {\n        -- The first line shows the current value using the built-in Paragraph component\n        Paragraph({\n            content = "Current Count: " .. count\n        }),\n\n        -- The second line is an interactive Button component\n        Button({\n            label = "Click to Increment",\n            on_press = increment, -- Connects the button press to our logic\n        }),\n    }\nend)\n'})})]})}function p(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(l,{...n})}):l(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>c});var o=t(6540);const i={},s=o.createContext(i);function a(n){const e=o.useContext(s);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:a(n.components),o.createElement(s.Provider,{value:e},n.children)}}}]);