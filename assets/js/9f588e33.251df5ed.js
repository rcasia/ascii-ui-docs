"use strict";(self.webpackChunkascii_ui=self.webpackChunkascii_ui||[]).push([[478],{8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>a});var i=s(6540);const t={},c=i.createContext(t);function r(e){const n=i.useContext(c);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(c.Provider,{value:n},e.children)}},9060:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"hooks/use_effect","title":"useEffect Hook","description":"The useEffect hook in ascii-ui.nvim is a mechanism for running side effects in your functional components. Inspired by React\u2019s useEffect, it allows you to perform operations such as logging, subscriptions, or updating external resources in response to state changes or component rendering.","source":"@site/docs/hooks/use_effect.md","sourceDirName":"hooks","slug":"/hooks/use_effect","permalink":"/ascii-ui-docs/docs/hooks/use_effect","draft":false,"unlisted":false,"editUrl":"https://github.com/rcasia/ascii-ui-docs/docs/hooks/use_effect.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"sidebar_label":"useEffect"},"sidebar":"tutorialSidebar","previous":{"title":"useState","permalink":"/ascii-ui-docs/docs/hooks/use_state"},"next":{"title":"useReducer","permalink":"/ascii-ui-docs/docs/hooks/use_reducer"}}');var t=s(4848),c=s(8453);const r={sidebar_position:2,sidebar_label:"useEffect"},a="useEffect Hook",l={},d=[{value:"Overview",id:"overview",level:2},{value:"Signature",id:"signature",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Usage",id:"usage",level:2},{value:"Basic Example",id:"basic-example",level:3},{value:"Watching State",id:"watching-state",level:3},{value:"Multiple Dependencies",id:"multiple-dependencies",level:3},{value:"Comparison with React&#39;s <code>useEffect</code>",id:"comparison-with-reacts-useeffect",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Related",id:"related",level:2},{value:"References",id:"references",level:2}];function o(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,c.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsxs)(n.h1,{id:"useeffect-hook",children:[(0,t.jsx)(n.code,{children:"useEffect"})," Hook"]})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"useEffect"})," hook in ",(0,t.jsx)(n.strong,{children:"ascii-ui.nvim"})," is a mechanism for running side effects in your functional components. Inspired by ",(0,t.jsxs)(n.a,{href:"https://react.dev/reference/react/useEffect",children:["React\u2019s ",(0,t.jsx)(n.code,{children:"useEffect"})]}),", it allows you to perform operations such as logging, subscriptions, or updating external resources in response to state changes or component rendering."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"useEffect"})," lets you run a function (\u201ceffect\u201d) after your component is rendered, or whenever certain state values change. This is essential for:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Performing side effects after rendering (e.g., logging, updating external state)"}),"\n",(0,t.jsx)(n.li,{children:"Subscribing and unsubscribing to events"}),"\n",(0,t.jsx)(n.li,{children:"Reacting to changes in specific state variables"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The effect function runs once after the initial render. If you specify observed values (\u201cdependencies\u201d), the function will re-run whenever any of those values change."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"signature",children:"Signature"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"useEffect(effectFn [, observedValues])\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"effectFn"})," (",(0,t.jsx)(n.em,{children:"function"}),"): The function to run as a side effect."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"observedValues"})," (",(0,t.jsx)(n.em,{children:"table of getter functions"}),", optional): State getter functions to watch. The effect runs again if any of these values change."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Name"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"effectFn"}),(0,t.jsx)(n.td,{children:"function"}),(0,t.jsx)(n.td,{children:"The side-effect callback function to execute."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"observedValues"}),(0,t.jsx)(n.td,{children:"table of functions (optional)"}),(0,t.jsx)(n.td,{children:"List of state getter functions to observe for changes."})]})]})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(n.h3,{id:"basic-example",children:"Basic Example"}),"\n",(0,t.jsx)(n.p,{children:"Run a function after the component renders:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local ui = require("ascii-ui")\nlocal useEffect = ui.hooks.useEffect\n\nuseEffect(function()\n  print("Component mounted or rendered!")\nend)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"watching-state",children:"Watching State"}),"\n",(0,t.jsx)(n.p,{children:"Run a function only when certain state changes:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local ui = require("ascii-ui")\nlocal useEffect = ui.hooks.useEffect\nlocal useState = ui.hooks.useState\n\nlocal name, setName = useState("ascii-ui")\n\nuseEffect(function()\n  print("Name changed to: " .. name())\nend, { name })\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The effect prints a message only when ",(0,t.jsx)(n.code,{children:"name"})," changes (including the first render)."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"multiple-dependencies",children:"Multiple Dependencies"}),"\n",(0,t.jsx)(n.p,{children:"You can observe multiple state getters:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'useEffect(function()\n  print("Either count or name changed!")\nend, { count, name })\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h2,{id:"comparison-with-reacts-useeffect",children:["Comparison with React's ",(0,t.jsx)(n.code,{children:"useEffect"})]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Feature"}),(0,t.jsx)(n.th,{children:"ascii-ui.nvim"}),(0,t.jsx)(n.th,{children:"React"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Invocation"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"useEffect(fn, {dep1, dep2})"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"useEffect(fn, [dep1, dep2])"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Observed values"}),(0,t.jsx)(n.td,{children:"Table of getter functions"}),(0,t.jsx)(n.td,{children:"Array of variables/values"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Initial run"}),(0,t.jsx)(n.td,{children:"Always runs after first render"}),(0,t.jsx)(n.td,{children:"Always runs after first render"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Re-run on change"}),(0,t.jsx)(n.td,{children:"Yes, when any observed getter returns a new value"}),(0,t.jsx)(n.td,{children:"Yes, when any dependency value changes"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Cleanup support"}),(0,t.jsx)(n.td,{children:"Not built-in"}),(0,t.jsx)(n.td,{children:"Return function from effectFn for cleanup"})]})]})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Pass only the getter functions you want to observe in the dependency table."}),"\n",(0,t.jsx)(n.li,{children:"Avoid causing side effects that update the observed state in a way that causes infinite loops."}),"\n",(0,t.jsxs)(n.li,{children:["Use a single ",(0,t.jsx)(n.code,{children:"useEffect"})," for related logic; use multiple for unrelated effects."]}),"\n",(0,t.jsx)(n.li,{children:"If you want to run an effect only once (on mount), omit the dependency table."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"related",children:"Related"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/ascii-ui-docs/docs/hooks/use_state",children:(0,t.jsx)(n.code,{children:"useState"})}),": For managing local state."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/ascii-ui-docs/docs/hooks/use_reducer",children:(0,t.jsx)(n.code,{children:"useReducer"})}),": For more complex state updates."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/rcasia/ascii-ui.nvim/blob/main/lua/ascii-ui/hooks/use_effect.lua",children:"ascii-ui.nvim source: use_effect.lua"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://react.dev/reference/react/useEffect",children:"React documentation: useEffect"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/rcasia/ascii-ui.nvim#readme",children:"ascii-ui.nvim README"})}),"\n"]}),"\n",(0,t.jsx)(n.hr,{})]})}function h(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}}}]);