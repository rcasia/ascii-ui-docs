"use strict";(self.webpackChunkascii_ui=self.webpackChunkascii_ui||[]).push([[575],{7987:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"hooks/use-reducer","title":"useReducer","description":"Manage complex state logic inside ascii-ui components with a reducer function.","source":"@site/docs/hooks/use_reducer.md","sourceDirName":"hooks","slug":"/hooks/use-reducer","permalink":"/ascii-ui-docs/docs/hooks/use-reducer","draft":false,"unlisted":false,"editUrl":"https://github.com/rcasia/ascii-ui-docs/edit/main/docs/hooks/use_reducer.md","tags":[{"inline":true,"label":"api","permalink":"/ascii-ui-docs/docs/tags/api"},{"inline":true,"label":"hooks","permalink":"/ascii-ui-docs/docs/tags/hooks"},{"inline":true,"label":"reducer","permalink":"/ascii-ui-docs/docs/tags/reducer"},{"inline":true,"label":"state","permalink":"/ascii-ui-docs/docs/tags/state"}],"version":"current","frontMatter":{"id":"use-reducer","title":"useReducer","sidebar_label":"useReducer","description":"Manage complex state logic inside ascii-ui components with a reducer function.","tags":["api","hooks","reducer","state"]},"sidebar":"tutorialSidebar","previous":{"title":"useInterval","permalink":"/ascii-ui-docs/docs/hooks/use-interval"},"next":{"title":"useState","permalink":"/ascii-ui-docs/docs/hooks/use-state"}}');var r=t(4848),c=t(8453);const i={id:"use-reducer",title:"useReducer",sidebar_label:"useReducer",description:"Manage complex state logic inside ascii-ui components with a reducer function.",tags:["api","hooks","reducer","state"]},d="useReducer",a={},o=[{value:"Reference",id:"reference",level:2},{value:"<code>useReducer(reducerFn, initialValue)</code>",id:"usereducerreducerfn-initialvalue",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Returns",id:"returns",level:3},{value:"Usage",id:"usage",level:2},{value:"Example: Counter with Reducer",id:"example-counter-with-reducer",level:3}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"usereducer",children:"useReducer"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"useReducer"})," lets you manage ",(0,r.jsx)(n.strong,{children:"complex state logic"})," by applying a reducer function to the current state and dispatched actions inside an ascii-ui component."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"local state, dispatch = ui.hooks.useReducer(reducerFn, initialValue)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"reference",children:"Reference"}),"\n",(0,r.jsx)(n.h3,{id:"usereducerreducerfn-initialvalue",children:(0,r.jsx)(n.code,{children:"useReducer(reducerFn, initialValue)"})}),"\n",(0,r.jsxs)(n.p,{children:["Call ",(0,r.jsx)(n.code,{children:"useReducer"})," at the top level of a component to manage state transitions based on ",(0,r.jsx)(n.strong,{children:"dispatched actions"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["It\u2019s useful when your state logic is complex or when the next state depends on the ",(0,r.jsx)(n.strong,{children:"previous state"})," and an ",(0,r.jsx)(n.strong,{children:"action"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"local state, dispatch = ui.hooks.useReducer(reducerFn, initialValue)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Each time you call dispatch(action), useReducer runs your reducerFn(state, action) and updates the component state with its result."}),"\n",(0,r.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Name"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"reducerFn"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"fun(state: T, action: A): T"})}),(0,r.jsxs)(n.td,{children:["A ",(0,r.jsx)(n.strong,{children:"pure function"})," that takes the current state and an action, and returns the ",(0,r.jsx)(n.strong,{children:"next state"}),". It should not mutate the existing state."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"initialValue"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"T"})}),(0,r.jsxs)(n.td,{children:["The initial state value. Can be any Lua type (",(0,r.jsx)(n.code,{children:"number"}),", ",(0,r.jsx)(n.code,{children:"string"}),", ",(0,r.jsx)(n.code,{children:"boolean"}),", ",(0,r.jsx)(n.code,{children:"table"}),", etc.). Used only during the first render."]})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"returns",children:"Returns"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"useReducer"})," returns a pair: the current state value and a dispatch function."]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Name"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"state"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"T"})}),(0,r.jsx)(n.td,{children:"The current state value. Each render receives the latest state after the reducer is applied."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"dispatch"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"fun(action: A)"})}),(0,r.jsxs)(n.td,{children:["A function that sends an ",(0,r.jsx)(n.strong,{children:"action"})," to the reducer. When called, it computes the next state using ",(0,r.jsx)(n.code,{children:"reducerFn(state, action)"})," and triggers a re-render with the updated value."]})]})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(n.h3,{id:"example-counter-with-reducer",children:"Example: Counter with Reducer"}),"\n",(0,r.jsxs)(n.p,{children:["Use ",(0,r.jsx)(n.code,{children:"useReducer"})," when state transitions depend on ",(0,r.jsx)(n.strong,{children:"action types"})," or when you want to centralize state logic."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local ui = require("ascii-ui")\nlocal useReducer = ui.hooks.useReducer\nlocal Button = ui.components.Button\n\nlocal function reducer(state, action)\n  if action.type == "increment" then\n    return state + 1\n  elseif action.type == "decrement" then\n    return state - 1\n  end\n  return state\nend\n\nlocal Counter = ui.createComponent("Counter", function()\n  local count, dispatch = useReducer(reducer, 0)\n\n  return {\n    Button({\n      label = "Count: " .. count,\n      on_press = function()\n        dispatch({ type = "increment" })\n      end,\n    }),\n  }\nend)\n\nreturn Counter\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Each time you call ",(0,r.jsx)(n.code,{children:'dispatch({ type = "increment" })'}),", the reducer function runs and returns the next state.\nThe component re-renders automatically with the new value."]})]})}function u(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>d});var s=t(6540);const r={},c=s.createContext(r);function i(e){const n=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(c.Provider,{value:n},e.children)}}}]);