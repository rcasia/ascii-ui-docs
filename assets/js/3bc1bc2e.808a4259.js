"use strict";(self.webpackChunkascii_ui=self.webpackChunkascii_ui||[]).push([[8538],{3413:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"hooks/use-state","title":"useState","description":"Manage local state inside ascii-ui components.","source":"@site/docs/hooks/use_state.md","sourceDirName":"hooks","slug":"/hooks/use-state","permalink":"/ascii-ui-docs/docs/hooks/use-state","draft":false,"unlisted":false,"editUrl":"https://github.com/rcasia/ascii-ui-docs/edit/main/docs/hooks/use_state.md","tags":[{"inline":true,"label":"api","permalink":"/ascii-ui-docs/docs/tags/api"},{"inline":true,"label":"hooks","permalink":"/ascii-ui-docs/docs/tags/hooks"},{"inline":true,"label":"state","permalink":"/ascii-ui-docs/docs/tags/state"}],"version":"current","frontMatter":{"id":"use-state","title":"useState","sidebar_label":"useState","description":"Manage local state inside ascii-ui components.","tags":["api","hooks","state"]},"sidebar":"tutorialSidebar","previous":{"title":"useReducer","permalink":"/ascii-ui-docs/docs/hooks/use-reducer"},"next":{"title":"useTimeout","permalink":"/ascii-ui-docs/docs/hooks/use-timeout"}}');var a=n(4848),i=n(8453);const r={id:"use-state",title:"useState",sidebar_label:"useState",description:"Manage local state inside ascii-ui components.",tags:["api","hooks","state"]},l="useState",o={},c=[{value:"Reference",id:"reference",level:2},{value:"<code>useState(initialValue)</code>",id:"usestateinitialvalue",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Returns",id:"returns",level:3},{value:"Usage",id:"usage",level:2},{value:"Updating state",id:"updating-state",level:3},{value:"Example with Counter Component",id:"example-with-counter-component",level:3}];function d(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"usestate",children:"useState"})}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"useState"})," lets you add local reactive state to an ascii-ui component."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-lua",children:"local value, setValue = ui.hooks.useState(initialValue)\n"})}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsx)(t.h2,{id:"reference",children:"Reference"}),"\n",(0,a.jsx)(t.h3,{id:"usestateinitialvalue",children:(0,a.jsx)(t.code,{children:"useState(initialValue)"})}),"\n",(0,a.jsxs)(t.p,{children:["Call ",(0,a.jsx)(t.code,{children:"useState"})," at the top level of a component to declare a local state variable."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-lua",children:"local value, setValue = ui.hooks.useState(initialValue)\n"})}),"\n",(0,a.jsx)(t.h3,{id:"parameters",children:"Parameters"}),"\n",(0,a.jsxs)(t.table,{children:[(0,a.jsx)(t.thead,{children:(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.th,{children:"Name"}),(0,a.jsx)(t.th,{children:"Type"}),(0,a.jsx)(t.th,{children:"Description"})]})}),(0,a.jsx)(t.tbody,{children:(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"initialValue"})}),(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"T"})}),(0,a.jsxs)(t.td,{children:["The initial state value. It can be any Lua type (",(0,a.jsx)(t.code,{children:"number"}),", ",(0,a.jsx)(t.code,{children:"string"}),", ",(0,a.jsx)(t.code,{children:"boolean"}),", ",(0,a.jsx)(t.code,{children:"table"}),", etc.). The value is used only on the first render\u2014subsequent re-renders ignore it."]})]})})]}),"\n",(0,a.jsx)(t.h3,{id:"returns",children:"Returns"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"useState"})," returns a pair: the current state value and a function that lets you update it."]}),"\n",(0,a.jsxs)(t.table,{children:[(0,a.jsx)(t.thead,{children:(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.th,{children:"Name"}),(0,a.jsx)(t.th,{children:"Type"}),(0,a.jsx)(t.th,{children:"Description"})]})}),(0,a.jsxs)(t.tbody,{children:[(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"value"})}),(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"T"})}),(0,a.jsxs)(t.td,{children:["A ",(0,a.jsx)(t.strong,{children:"deep copy"})," of the current state. Treat it as read-only. Each render receives the latest state value."]})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"setValue"})}),(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"fun(next: T | fun(prev: T): T)"})}),(0,a.jsxs)(t.td,{children:["A function to update the state. Calling it schedules a re-render of the component. You can pass either a ",(0,a.jsx)(t.strong,{children:"new value"})," or an ",(0,a.jsx)(t.strong,{children:"updater function"})," that receives the previous value and returns the next one."]})]})]})]}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsx)(t.p,{children:"Every time you call setCount, the component re-renders with the updated value."}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,a.jsx)(t.h3,{id:"updating-state",children:"Updating state"}),"\n",(0,a.jsx)(t.p,{children:"Use the setter function to update the state.\nYou can pass either a new value or a function that receives the previous value."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-lua",children:"setCount(count + 1)\n-- or\nsetCount(function(prev) return prev + 1 end)\n"})}),"\n",(0,a.jsx)(t.p,{children:"The functional form helps avoid stale reads when updates happen rapidly."}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsx)(t.h3,{id:"example-with-counter-component",children:"Example with Counter Component"}),"\n",(0,a.jsx)(t.p,{children:"Here\u2019s a simple counter component using useState:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-lua",children:'local ui = require("ascii-ui")\nlocal useState = ui.hooks.useState\nlocal Paragraph = ui.components.Paragraph\nlocal Button = ui.components.Button\n\nlocal Counter = ui.createComponent("Counter", function()\n  local count, setCount = useState(0)\n\n  return {\n    Paragraph({ content = "Count: " .. count }),\n    Button({\n      label = "Increment",\n      on_press = function()\n        setCount(count + 1)\n      end,\n    }),\n  }\nend)\n\nreturn Counter\n'})})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>l});var s=n(6540);const a={},i=s.createContext(a);function r(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);