"use strict";(self.webpackChunkascii_ui=self.webpackChunkascii_ui||[]).push([[799],{4435:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>d,frontMatter:()=>c,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"hooks/use_function_registry","title":"useFunctionRegistry Hook","description":"The useFunctionRegistry hook in ascii-ui.nvim allows you to register a Lua function and receive a reference string that can be used as a callback in declarative UI markup or passed as a prop to components that expect a function reference. This is especially useful in scenarios where your UI definition is dynamic (such as when using XML-like syntax) or where functions need to be referenced indirectly.","source":"@site/docs/hooks/use_function_registry.md","sourceDirName":"hooks","slug":"/hooks/use_function_registry","permalink":"/ascii-ui-docs/docs/hooks/use_function_registry","draft":false,"unlisted":false,"editUrl":"https://github.com/rcasia/ascii-ui-docs/docs/hooks/use_function_registry.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"sidebar_label":"useFunctionRegistry"},"sidebar":"tutorialSidebar","previous":{"title":"useReducer","permalink":"/ascii-ui-docs/docs/hooks/use_reducer"}}');var r=s(4848),t=s(8453);const c={sidebar_position:4,sidebar_label:"useFunctionRegistry"},a="useFunctionRegistry Hook",o={},l=[{value:"Overview",id:"overview",level:2},{value:"Signature",id:"signature",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Usage",id:"usage",level:2},{value:"Example using with XML Markup",id:"example-using-with-xml-markup",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Related",id:"related",level:2},{value:"References",id:"references",level:2}];function u(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsxs)(n.h1,{id:"usefunctionregistry-hook",children:[(0,r.jsx)(n.code,{children:"useFunctionRegistry"})," Hook"]})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"useFunctionRegistry"})," hook in ",(0,r.jsx)(n.strong,{children:"ascii-ui.nvim"})," allows you to register a Lua function and receive a reference string that can be used as a callback in declarative UI markup or passed as a prop to components that expect a function reference. This is especially useful in scenarios where your UI definition is dynamic (such as when using XML-like syntax) or where functions need to be referenced indirectly."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"useFunctionRegistry"})," solves the problem of referring to functions in a declarative UI context where you may not be able to directly pass a Lua function as a prop (for example, when using string-based markup or when serializing/deserializing UI definitions). It registers your function in a global registry and returns a string reference key that can be used to look up and call the function later."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"signature",children:"Signature"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"local ref = useFunctionRegistry(fn)\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"fn"})," (",(0,r.jsx)(n.em,{children:"function"}),"): The Lua function you want to register."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Name"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"fn"}),(0,r.jsx)(n.td,{children:"function"}),(0,r.jsx)(n.td,{children:"The function to be registered."})]})})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"return-value",children:"Return Value"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Name"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"ref"}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"A unique string reference to the registered function."})]})})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"This reference can be passed as a prop (e.g., as an event handler in markup)."}),"\n",(0,r.jsx)(n.li,{children:"The reference can be resolved by the ascii-ui runtime to call the function."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(n.h3,{id:"example-using-with-xml-markup",children:"Example using with XML Markup"}),"\n",(0,r.jsx)(n.p,{children:"When rendering UI with XML-like syntax, use the reference string as an event handler:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local ui = require("ascii-ui")\nlocal useState = ui.hooks.useState\nlocal useFunctionRegistry = ui.hooks.useFunctionRegistry\n\nlocal function App()\n  local message, setMessage = useState("Hello World")\n  local ref = useFunctionRegistry(function()\n    setMessage("Button Pressed!")\n  end)\n\n  return function()\n    return ([[\n\n      <Layout>\n        <Paragraph content="%s" />\n        <Button label="Press me" on_press="%s" />\n      </Layout>\n\n    ]]):format(message(), ref)\n  end\nend\n\nui.mount(App())\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"on_press"})," attribute receives the function reference as a string, and the UI system looks it up and calls it when the button is pressed."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"useFunctionRegistry"})," when you need to reference a function in markup or when passing callbacks indirectly."]}),"\n",(0,r.jsx)(n.li,{children:"Avoid using it for standard in-code callbacks\u2014prefer direct function references when possible."}),"\n",(0,r.jsx)(n.li,{children:"Clean up any registered functions if your application creates/destroys many dynamic callbacks to avoid memory leaks."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"related",children:"Related"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/ascii-ui-docs/docs/hooks/use_state",children:(0,r.jsx)(n.code,{children:"useState"})}),": For managing local component state."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/ascii-ui-docs/docs/hooks/use_effect",children:(0,r.jsx)(n.code,{children:"useEffect"})}),": For running side effects after rendering."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/rcasia/ascii-ui.nvim/blob/main/lua/ascii-ui/hooks/use_function_registry.lua",children:"ascii-ui.nvim source: use_function_registry.lua"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/rcasia/ascii-ui.nvim#readme",children:"ascii-ui.nvim README"})}),"\n"]}),"\n",(0,r.jsx)(n.hr,{})]})}function d(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>a});var i=s(6540);const r={},t=i.createContext(r);function c(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);